swagger: '2.0'
info:
  title: JGW Attendance Management System API
  description: |2+

    # 소개
    해당 API를 사용하여 학회의 행사와 타임테이블을 관리하거나, 출결을 관리할 수 있습니다.

    해당 API를 사용하기 위해서 아래 요소들을 알고 있어야 합니다.

    ## Event(행사)
    Event는 학회에서 진행하는 행사를 의미합니다. 예) 1학기 세미나, 동계 워크샵 등

    출결 및 타임테이블을 생성하기 위해서는 이 행사를 우선적으로 생성해야 합니다.

    ## TimeTable(시간표)
    TimeTable은 행사에 속하는 시간표를 의미합니다. 실제 자람의 세미나 출결관리를 예로 들어 살펴보겠습니다.

    '1학기 세미나' 라는 Event(행사)가 있습니다. 자람 회원이라면 아시겠지만, 세미나라는 행사는 하루만 진행하는 행사가 아닙니다. 주마다 한번씩 진행하죠.

    따라서 1주차,2주차,3주차 …​ 이런식으로 시간표를 생성하고 각각의 주마다 출결 확인을 합니다.

    즉 이러한 time table 별로 출결을 등록하는 방식으로 동작합니다. 따라서 time table을 생성할 때에는 함께 '미결' 출결 정보를 생성하는 것을 권장합니다.

    ## Attendance(출결)
    Attendance는 출결을 의미합니다. 위에서 언급했듯이 timeTable별로 출결을 관리할 수 있습니다. 단, 한개의 timeTable에는 회원당 1개의 출결 정보만 기록할 수 있다는 것을 명심하세요.

    ## AttendanceType(출결 타입)
    AttendanceType은 출결 타입을 의미합니다. 미결,출결,결석,출석 인정으로 구성됩니다. 위에서 살펴본 Attendance의 출결 유형을 구분하기 위해 사용합니다.

    ## Attendance Code(출결 코드)
    attendanceCode는 출결 코드를 의미합니다. 해당 코드를 사용하여 일반 사용자가 출결을 등록할 수 있습니다.

    동작방식은 대학교의 출결 형태를 떠올리면 쉽습니다.

    1. 위에서 살펴본 time table(시간표)에 관리자(임원진)이 출결 코드를 발급합니다.

    2. 발급된 출결 코드를 사용하여 일반 사용자가 출결을 등록합니다.

    단 출결 코드는 아래 제약 사항을 가집니다.

     * 초 단위로 유효시간을 설정해야 하며 최대 2592000초(30일)까지 설정할 수 있습니다.(영구적인 코드 발급이 가능하지만, 권장하지 않습니다.)

     * 한 Time Table(시간표)에는 한개의 출결코드를 가질 수 있습니다.

  contact:
    email: bbbong9@gmail.com
  version: v1
host: 127.0.0.1:8000
schemes:
- http
basePath: /attendance/api/v1
consumes:
- application/json
produces:
- application/json
securityDefinitions:
  Basic:
    type: basic
security:
- Basic: []
paths:
  /attendance/:
    get:
      operationId: attendance_list
      summary: 다수 Attendance를 조회
      description: |-
        ---
        RBAC - 2(수습 회원) 이상

        자신의 정보를 조회할 때는 role이 2(수습 회원)이어도 괜찮습니다.

        다만, 다른 사람의 정보를 조회할 때는 role이 4(임원진)이어야 합니다.



        ## Query parameters (공통 설명)
        **주의!** 모든 option들은 단 한개의 인자만 수용가능합니다!

         * (O) "?memberID=456465456&timeTableID=1"

         * (X) "?memberID=456465456,456456456465&timeTableID=1,123123"

        또한 모든 Option들은 And로 동작합니다.

        만약 "?memberID=456465456&timeTableID=1"라는 인자가 있다면,memberID가 "456465456"이고, timeTableID가 1인 Attendance를 찾습니다.



        ## Equal Query Options
        조건과 일치한 모든 Attendance를 확인할 수 있습니다.
        해당 옵션들은 입력된 값과 완전히 일치 되는 경우를 탐색합니다.
        "createdBy = 'system'" 옵션을 제공하면, createdBy가 "system"인 event들을 조회합니다.

        |param name|type|description|
        |---|---|---|
        |attendanceTypeID|Number|해당 Attendance의 AttendanceType ID|
        |memberID|String|해당 Attendance의 Member ID|
        |timeTableID|Number|해당 Attendance의 TimeTable ID|
        |createdBy|String|해당 Attendance를 생성한 사람|
        |modifiedBy|String|해당 Attendance를 마지막으로 수정한 사람|



        ## Range Query Options
        해당 옵션들을 사용하여 Attendance요소를 범위 설정하여 검색할 수 있습니다.

        예를들어, "createdDateTime" 옵션을 검색하고 싶다면, "startCreatedDateTime"으로 시작 범위를 설정하고"endCreatedDateTime"으로 종료 범위를 설정하여 검색할 수 있습니다.

        * 시작 범위와 종료 범위가 모두 입력되었다면, 해당 범위를 탐색합니다.

        * 시작 범위만 입력됬을 경우, 해당 시작범위에서 최대 범위(9999-12-31 59:59:59)에 해당하는 범위를 탐색합니다.

        * 종료 범위만 입력됬을 경우, 최소 범위("1000-01-01 00:00:00")에서 종료 범위까지에 해당하는 범위를 탐색합니다.

        |param name|type|start range param|end range param|description|
        |---|---|---|---|---|
        |CreatedDateTime|DateTime(yyyy-MM-dd HH:mm:ss)|startCreatedDateTime|endCreatedDateTime|해당 Attendance가 생성된 시간|
        |ModifiedDateTime|DateTime(yyyy-MM-dd HH:mm:ss)|startModifiedDateTime|endModifiedDateTime|해당 Attendance가 마지막으로 수정된 시간|



        ## Like Query Options
        조건과 유사한 모든 Attendance를 확인할 수 있습니다.
        해당 옵션들을 사용하면, 해당 문자열을 포함하는 event를 조회합니다.

        예를 들어 "이것은 세미나입니다"라는 index가 있다고 가정합시다.

        "index" 인자로 "세미나" 이라는 값을 주었다면, index에 "출결"이라는 글자가 들어가는 event들을 찾습니다.

        |param name|type|description|
        |---|---|---|
        |index|String|해당 Attendance의 부연설명|



        ## Pagination Options
        Attendance 페이지에 대한 데이터 랜더링 값을 설정할 수 있습니다.
        해당 인자를 통해 pagination처리를 할 수 있습니다. Sort Option은 아래 파트를 참고하세요.

        **주의!** pagination을 설정하지 않더라도, 모든 request는 1000의 Size로 자동으로 pagination처리가 됩니다! 만약 1000건 보다 많은 양의 데이터가 필요하다면, size를 지정해주어야합니다.

        |param name|description|size|
        |---|---|---|
        |Page의 크기|page|Page의 위치|



        ## Sort Options
        다음 옵션들을 사용하여 Attendance 데이터를 정렬할 수 있습니다.
        Sort Option은 "sort" 인자에 제공해야합니다. 위 옵션들과 다르게 Sort Option은 여러 인자들을 입력해도 됩니다.

        sort 인자에 모든 Option들을 지정했다면, 마지막 인자로 Sort 방향을 지정해주여야 합니다. ASC(오름 차순), DESC(내립차순) 2가지 옵션이 있습니다. 만약 옵션을 지정해주지 않았다면, DESC로 동작합니다.

        사용예시 "sort=member,asc", "sort=member,timeTable,desc"

        **주의!** Sort Option을 지정해주지 않더라도, 기본적으로 id에 대하여 DESC 방향으로 정렬을 진행합니다!

        |param name|description|
        |---|---|
        |id|Attendance의 ID에 대하여 정렬합니다.|
        |attendanceType|attendanceType의 ID에 대하여 정렬합니다.|
        |member|member의 ID에 대하여 정렬합니다.|
        |timeTable|timeTable의 ID에 대하여 정렬합니다.|
        |index|index에 대하여 정렬합니다.|
        |createdDateTime|생성된 시간순으로 정렬합니다.|
        |modifiedDateTime|마지막으로 수정된 시간 순으로 정렬합니다.|
        |createdBy|생성한자에 대하여 정렬합니다.|
        |modifiedBy|마지막으로 수정한자에 대하여 정렬합니다.|
      parameters:
      - name: createdBy
        in: query
        description: createdBy
        required: false
        type: string
      - name: modifiedBy
        in: query
        description: modifiedBy
        required: false
        type: string
      - name: startCreatedDateTime
        in: query
        description: startCreatedDateTime
        required: false
        type: string
      - name: endCreatedDateTime
        in: query
        description: endCreatedDateTime
        required: false
        type: string
      - name: startModifiedDateTime
        in: query
        description: startModifiedDateTime
        required: false
        type: string
      - name: endModifiedDateTime
        in: query
        description: endModifiedDateTime
        required: false
        type: string
      - name: attendanceTypeID
        in: query
        description: attendanceTypeID
        required: false
        type: string
      - name: memberID
        in: query
        description: memberID
        required: false
        type: string
      - name: timeTableID
        in: query
        description: timeTableID
        required: false
        type: string
      - name: index
        in: query
        description: index
        required: false
        type: string
      - name: page
        in: query
        description: A page number within the paginated result set.
        required: false
        type: integer
      - name: page_size
        in: query
        description: Number of results to return per page.
        required: false
        type: integer
      - name: uid
        in: header
        description: 요청을 보내는 유저의 UID 입니다.
        type: string
      - name: role_id
        in: header
        description: 요청을 보내는 유저의 Role ID입니다.
        type: string
      responses:
        '200':
          description: ''
          schema:
            required:
            - count
            - results
            type: object
            properties:
              count:
                type: integer
              next:
                type: string
                format: uri
                x-nullable: true
              previous:
                type: string
                format: uri
                x-nullable: true
              results:
                type: array
                items:
                  $ref: '#/definitions/Attendance'
      tags:
      - attendance
    parameters: []
  /attendance/add/:
    post:
      operationId: attendance_add_create
      summary: 신규 AttendanceCode 추가
      description: |-
        ---
        RBAC - 4(어드민)

        해당 API를 통해 신규 AttendanceCode를 추가할 수 있습니다.
      parameters:
      - name: uid
        in: header
        description: 요청을 보내는 유저의 UID 입니다.
        type: string
      - name: role_id
        in: header
        description: 요청을 보내는 유저의 Role ID입니다.
        type: string
      responses:
        '201':
          description: ''
      tags:
      - attendance
    parameters: []
  /attendance/attendanceType/:
    get:
      operationId: attendance_attendanceType_list
      summary: 출결 종류를 조회할 수 있는 API 입니다.
      description: |-
        ---
        등록되어 있는 모든 AttendanceType를 확인할 수 있습니다.



        ## Query parameters (공통 설명)
        **주의!** 모든 option들은 단 한개의 인자만 수용가능합니다!

         * (O) "?memberID=456465456&timeTableID=1"

         * (X) "?memberID=456465456,456456456465&timeTableID=1,123123"

        또한 모든 Option들은 And로 동작합니다.

        만약 "?memberID=456465456&timeTableID=1"라는 인자가 있다면,memberID가 "456465456"이고, timeTableID가 1인 Attendance를 찾습니다.



        ## Equal Query Options
        조건과 일치한 모든 AttendanceType를 확인할 수 있습니다.
        해당 옵션들은 입력된 값과 완전히 일치 되는 경우를 탐색합니다.
        "createdBy = 'system'" 옵션을 제공하면, createdBy가 "system"인 event들을 조회합니다.

        |param name|type|description|
        |---|---|---|
        |createdBy|String|해당 AttendanceType을 생성한 사람|
        |modifiedBy|String|해당 AttendanceType을 마지막으로 수정한 사람|



        ## Range Query Options
        해당 옵션들을 사용하여 AttendanceType요소를 범위 설정하여 검색할 수 있습니다.

        예를들어, "createdDateTime" 옵션을 검색하고 싶다면, "startCreatedDateTime"으로 시작 범위를 설정하고"endCreatedDateTime"으로 종료 범위를 설정하여 검색할 수 있습니다.

        * 시작 범위와 종료 범위가 모두 입력되었다면, 해당 범위를 탐색합니다.

        * 시작 범위만 입력됬을 경우, 해당 시작범위에서 최대 범위(9999-12-31 59:59:59)에 해당하는 범위를 탐색합니다.

        * 종료 범위만 입력됬을 경우, 최소 범위("1000-01-01 00:00:00")에서 종료 범위까지에 해당하는 범위를 탐색합니다.

        |param name|type|start range param|end range param|description|
        |---|---|---|---|---|
        |CreatedDateTime|DateTime(yyyy-MM-dd HH:mm:ss)|startCreatedDateTime|endCreatedDateTime|해당 AttendanceType이 생성된 시간|
        |ModifiedDateTime|DateTime(yyyy-MM-dd HH:mm:ss)|startModifiedDateTime|endModifiedDateTime|해당 AttendanceType이 마지막으로 수정된 시간|
        |DATETIME|DateTime(yyyy-MM-dd HH:mm:ss)|startDateTime|endDateTime|해당 AttendanceType의 진행 기간|



        ## Like Query Options
        조건과 유사한 모든 AttendanceType를 확인할 수 있습니다.
        해당 옵션들을 사용하면, 해당 문자열을 포함하는 event를 조회합니다.

        예를 들어 "이것은 세미나입니다"라는 index가 있다고 가정합시다.

        "index" 인자로 "세미나" 이라는 값을 주었다면, index에 "출결"이라는 글자가 들어가는 event들을 찾습니다.

        |param name|type|description|
        |---|---|---|
        |name|String|해당 AttendanceType의 이름|
        |index|String|해당 AttendanceType에 대한 부연설명|



        ## Pagination Options
        AttendanceType 페이지에 대한 데이터 랜더링 값을 설정할 수 있습니다.
        해당 인자를 통해 pagination처리를 할 수 있습니다. Sort Option은 아래 파트를 참고하세요.

        **주의!** pagination을 설정하지 않더라도, 모든 request는 1000의 Size로 자동으로 pagination처리가 됩니다! 만약 1000건 보다 많은 양의 데이터가 필요하다면, size를 지정해주어야합니다.

        |param name|description|size|
        |---|---|---|
        |Page의 크기|page|Page의 위치|



        ## Sort Options
        다음 옵션들을 사용하여 AttendanceType 데이터를 정렬할 수 있습니다.
        Sort Option은 "sort" 인자에 제공해야합니다. 위 옵션들과 다르게 Sort Option은 여러 인자들을 입력해도 됩니다.

        sort 인자에 모든 Option들을 지정했다면, 마지막 인자로 Sort 방향을 지정해주여야 합니다. ASC(오름 차순), DESC(내립차순) 2가지 옵션이 있습니다. 만약 옵션을 지정해주지 않았다면, DESC로 동작합니다.

        사용예시 "sort=member,asc", "sort=member,timeTable,desc"

        **주의!** Sort Option을 지정해주지 않더라도, 기본적으로 id에 대하여 DESC 방향으로 정렬을 진행합니다!

        |param name|description|
        |---|---|
        |id|AttendanceType의 ID에 대하여 정렬합니다.|
        |name|AttendanceType의 이름에 대하여 정렬합니다.|
        |index|index에 대하여 정렬합니다.|
        |createdDateTime|생성된 시간순으로 정렬합니다.|
        |modifiedDateTime|마지막으로 수정된 시간 순으로 정렬합니다.|
        |startDateTime|시작 시간 순으로 정렬합니다.|
        |endDateTime|종료 시간 순으로 정렬합니다.|
        |createdBy|생성한자에 대하여 정렬합니다.|
        |modifiedBy|마지막으로 수정한자에 대하여 정렬합니다.|
      parameters:
      - name: createdBy
        in: query
        description: createdBy
        required: false
        type: string
      - name: modifiedBy
        in: query
        description: modifiedBy
        required: false
        type: string
      - name: startCreatedDateTime
        in: query
        description: startCreatedDateTime
        required: false
        type: string
      - name: endCreatedDateTime
        in: query
        description: endCreatedDateTime
        required: false
        type: string
      - name: startModifiedDateTime
        in: query
        description: startModifiedDateTime
        required: false
        type: string
      - name: endModifiedDateTime
        in: query
        description: endModifiedDateTime
        required: false
        type: string
      - name: name
        in: query
        description: name
        required: false
        type: string
      - name: page
        in: query
        description: A page number within the paginated result set.
        required: false
        type: integer
      - name: page_size
        in: query
        description: Number of results to return per page.
        required: false
        type: integer
      - name: uid
        in: header
        description: 요청을 보내는 유저의 UID 입니다.
        type: string
      - name: role_id
        in: header
        description: 요청을 보내는 유저의 Role ID입니다.
        type: string
      responses:
        '200':
          description: ''
          schema:
            required:
            - count
            - results
            type: object
            properties:
              count:
                type: integer
              next:
                type: string
                format: uri
                x-nullable: true
              previous:
                type: string
                format: uri
                x-nullable: true
              results:
                type: array
                items:
                  $ref: '#/definitions/AttendanceType'
      tags:
      - attendance
    parameters: []
  /attendance/{attendanceId}/:
    get:
      operationId: attendance_read
      summary: AttendanceCode API
      description: |-
        ---
        출결 코드를 추가하고, 삭제하고, 사용하는 API를 제공합니다.
      parameters:
      - name: uid
        in: header
        description: 요청을 보내는 유저의 UID 입니다.
        type: string
      - name: role_id
        in: header
        description: 요청을 보내는 유저의 Role ID입니다.
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Attendance'
      tags:
      - attendance
    put:
      operationId: attendance_update
      summary: AttendanceCode API
      description: |-
        ---
        출결 코드를 추가하고, 삭제하고, 사용하는 API를 제공합니다.
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/Attendance'
      - name: uid
        in: header
        description: 요청을 보내는 유저의 UID 입니다.
        type: string
      - name: role_id
        in: header
        description: 요청을 보내는 유저의 Role ID입니다.
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Attendance'
      tags:
      - attendance
    delete:
      operationId: attendance_delete
      summary: AttendanceCode API
      description: |-
        ---
        출결 코드를 추가하고, 삭제하고, 사용하는 API를 제공합니다.
      parameters:
      - name: uid
        in: header
        description: 요청을 보내는 유저의 UID 입니다.
        type: string
      - name: role_id
        in: header
        description: 요청을 보내는 유저의 Role ID입니다.
        type: string
      responses:
        '204':
          description: ''
      tags:
      - attendance
    parameters:
    - name: attendanceId
      in: path
      required: true
      type: string
  /event/:
    get:
      operationId: event_list
      summary: 다수 Event를 조회
      description: |-
        ---
        RBAC - 4(어드민)



        ## Query parameters (공통 설명)
        **주의!** 모든 option들은 단 한개의 인자만 수용가능합니다!

         * (O) "?memberID=456465456&timeTableID=1"

         * (X) "?memberID=456465456,456456456465&timeTableID=1,123123"

        또한 모든 Option들은 And로 동작합니다.

        만약 "?memberID=456465456&timeTableID=1"라는 인자가 있다면,memberID가 "456465456"이고, timeTableID가 1인 Attendance를 찾습니다.



        ## Equal Query Options
        조건과 일치한 모든 Event를 확인할 수 있습니다.
        해당 옵션들은 입력된 값과 완전히 일치 되는 경우를 탐색합니다.
        "createdBy = 'system'" 옵션을 제공하면, createdBy가 "system"인 event들을 조회합니다.

        |param name|type|description|
        |---|---|---|
        |createdBy|String|해당 event를 생성한 사람|
        |modifiedBy|String|해당 event를 마지막으로 수정한 사람|



        ## Range Query Options
        해당 옵션들을 사용하여 Event요소를 범위 설정하여 검색할 수 있습니다.

        예를들어, "createdDateTime" 옵션을 검색하고 싶다면, "startCreatedDateTime"으로 시작 범위를 설정하고"endCreatedDateTime"으로 종료 범위를 설정하여 검색할 수 있습니다.

        * 시작 범위와 종료 범위가 모두 입력되었다면, 해당 범위를 탐색합니다.

        * 시작 범위만 입력됬을 경우, 해당 시작범위에서 최대 범위(9999-12-31 59:59:59)에 해당하는 범위를 탐색합니다.

        * 종료 범위만 입력됬을 경우, 최소 범위("1000-01-01 00:00:00")에서 종료 범위까지에 해당하는 범위를 탐색합니다.

        |param name|type|start range param|end range param|description|
        |---|---|---|---|---|
        |CreatedDateTime|DateTime(yyyy-MM-dd HH:mm:ss)|startCreatedDateTime|endCreatedDateTime|해당 event가 생성된 시간|
        |ModifiedDateTime|DateTime(yyyy-MM-dd HH:mm:ss)|startModifiedDateTime|endModifiedDateTime|해당 event가 마지막으로 수정된 시간|
        |DATETIME|DateTime(yyyy-MM-dd HH:mm:ss)|startDateTime|endDateTime|해당 event의 진행 기간|



        ## Like Query Options
        조건과 유사한 모든 Event를 확인할 수 있습니다.
        해당 옵션들을 사용하면, 해당 문자열을 포함하는 event를 조회합니다.

        예를 들어 "이것은 세미나입니다"라는 index가 있다고 가정합시다.

        "index" 인자로 "세미나" 이라는 값을 주었다면, index에 "출결"이라는 글자가 들어가는 event들을 찾습니다.

        |param name|type|description|
        |---|---|---|
        |name|String|해당 event의 이름입니다.|
        |index|String|해당 event에 대한 부연설명|



        ## Pagination Options
        Event 페이지에 대한 데이터 랜더링 값을 설정할 수 있습니다.
        해당 인자를 통해 pagination처리를 할 수 있습니다. Sort Option은 아래 파트를 참고하세요.

        **주의!** pagination을 설정하지 않더라도, 모든 request는 1000의 Size로 자동으로 pagination처리가 됩니다! 만약 1000건 보다 많은 양의 데이터가 필요하다면, size를 지정해주어야합니다.

        |param name|description|size|
        |---|---|---|
        |Page의 크기|page|Page의 위치|



        ## Sort Options
        다음 옵션들을 사용하여 Event 데이터를 정렬할 수 있습니다.
        Sort Option은 "sort" 인자에 제공해야합니다. 위 옵션들과 다르게 Sort Option은 여러 인자들을 입력해도 됩니다.

        sort 인자에 모든 Option들을 지정했다면, 마지막 인자로 Sort 방향을 지정해주여야 합니다. ASC(오름 차순), DESC(내립차순) 2가지 옵션이 있습니다. 만약 옵션을 지정해주지 않았다면, DESC로 동작합니다.

        사용예시 "sort=member,asc", "sort=member,timeTable,desc"

        **주의!** Sort Option을 지정해주지 않더라도, 기본적으로 id에 대하여 DESC 방향으로 정렬을 진행합니다!

        |param name|description|
        |---|---|
        |id|event의 ID에 대하여 정렬합니다.|
        |name|event의 이름에 대하여 정렬합니다.|
        |index|index에 대하여 정렬합니다.|
        |createdDateTime|생성된 시간순으로 정렬합니다.|
        |modifiedDateTime|마지막으로 수정된 시간 순으로 정렬합니다.|
        |startDateTime|시작 시간 순으로 정렬합니다.|
        |endDateTime|종료 시간 순으로 정렬합니다.|
        |createdBy|생성한자에 대하여 정렬합니다.|
        |modifiedBy|마지막으로 수정한자에 대하여 정렬합니다.|
      parameters:
      - name: createdBy
        in: query
        description: createdBy
        required: false
        type: string
      - name: modifiedBy
        in: query
        description: modifiedBy
        required: false
        type: string
      - name: startCreatedDateTime
        in: query
        description: startCreatedDateTime
        required: false
        type: string
      - name: endCreatedDateTime
        in: query
        description: endCreatedDateTime
        required: false
        type: string
      - name: startModifiedDateTime
        in: query
        description: startModifiedDateTime
        required: false
        type: string
      - name: endModifiedDateTime
        in: query
        description: endModifiedDateTime
        required: false
        type: string
      - name: startDateTime
        in: query
        description: startDateTime
        required: false
        type: string
      - name: endDateTime
        in: query
        description: endDateTime
        required: false
        type: string
      - name: name
        in: query
        description: name
        required: false
        type: string
      - name: index
        in: query
        description: index
        required: false
        type: string
      - name: page
        in: query
        description: A page number within the paginated result set.
        required: false
        type: integer
      - name: page_size
        in: query
        description: Number of results to return per page.
        required: false
        type: integer
      - name: uid
        in: header
        description: 요청을 보내는 유저의 UID 입니다.
        type: string
      - name: role_id
        in: header
        description: 요청을 보내는 유저의 Role ID입니다.
        type: string
      responses:
        '200':
          description: ''
          schema:
            required:
            - count
            - results
            type: object
            properties:
              count:
                type: integer
              next:
                type: string
                format: uri
                x-nullable: true
              previous:
                type: string
                format: uri
                x-nullable: true
              results:
                type: array
                items:
                  $ref: '#/definitions/Event'
      tags:
      - event
    parameters: []
  /event/add/:
    post:
      operationId: event_add_create
      summary: 단일 Event를 등록
      description: |-
        ---
        RBAC - 4(어드민)

        해당 API를 통해 신규 Event를 추가할 수 있습니다.
      parameters:
      - name: uid
        in: header
        description: 요청을 보내는 유저의 UID 입니다.
        type: string
      - name: role_id
        in: header
        description: 요청을 보내는 유저의 Role ID입니다.
        type: string
      responses:
        '201':
          description: ''
      tags:
      - event
    parameters: []
  /event/{eventId}/:
    get:
      operationId: event_read
      summary: Event API
      description: |-
        ---
        event 를 추가하고, 삭제하고, 수정하는 API를 제공합니다.
      parameters:
      - name: uid
        in: header
        description: 요청을 보내는 유저의 UID 입니다.
        type: string
      - name: role_id
        in: header
        description: 요청을 보내는 유저의 Role ID입니다.
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Event'
      tags:
      - event
    put:
      operationId: event_update
      summary: Event API
      description: |-
        ---
        event 를 추가하고, 삭제하고, 수정하는 API를 제공합니다.
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/Event'
      - name: uid
        in: header
        description: 요청을 보내는 유저의 UID 입니다.
        type: string
      - name: role_id
        in: header
        description: 요청을 보내는 유저의 Role ID입니다.
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Event'
      tags:
      - event
    delete:
      operationId: event_delete
      summary: Event API
      description: |-
        ---
        event 를 추가하고, 삭제하고, 수정하는 API를 제공합니다.
      parameters:
      - name: uid
        in: header
        description: 요청을 보내는 유저의 UID 입니다.
        type: string
      - name: role_id
        in: header
        description: 요청을 보내는 유저의 Role ID입니다.
        type: string
      responses:
        '204':
          description: ''
      tags:
      - event
    parameters:
    - name: eventId
      in: path
      required: true
      type: string
  /timetable/:
    get:
      operationId: timetable_list
      summary: 다수 TimeTable을 조회
      description: |-
        ---
        Auth - 인증 필요

        여러 time table들을 조회, 페이징, 정렬, 필터링을 통해 조회할 수 있습니다.



        ## Query parameters (공통 설명)
        **주의!** 모든 option들은 단 한개의 인자만 수용가능합니다!

         * (O) "?memberID=456465456&timeTableID=1"

         * (X) "?memberID=456465456,456456456465&timeTableID=1,123123"

        또한 모든 Option들은 And로 동작합니다.

        만약 "?memberID=456465456&timeTableID=1"라는 인자가 있다면,memberID가 "456465456"이고, timeTableID가 1인 Attendance를 찾습니다.



        ## Equal Query Options
        조건과 일치한 모든 TimeTable를 확인할 수 있습니다.
        해당 옵션들은 입력된 값과 완전히 일치 되는 경우를 탐색합니다.
        "createdBy = 'system'" 옵션을 제공하면, createdBy가 "system"인 event들을 조회합니다.

        |param name|type|description|
        |---|---|---|
        |eventID|Number|해당 TimeTable이 속한 가지고 있는 Event의 ID|
        |createdBy|String|해당 TimeTable를 생성한 사람|
        |modifiedBy|String|해당 TimeTable를 마지막으로 수정한 사람|



        ## Range Query Options
        해당 옵션들을 사용하여 TimeTable요소를 범위 설정하여 검색할 수 있습니다.

        예를들어, "createdDateTime" 옵션을 검색하고 싶다면, "startCreatedDateTime"으로 시작 범위를 설정하고"endCreatedDateTime"으로 종료 범위를 설정하여 검색할 수 있습니다.

        * 시작 범위와 종료 범위가 모두 입력되었다면, 해당 범위를 탐색합니다.

        * 시작 범위만 입력됬을 경우, 해당 시작범위에서 최대 범위(9999-12-31 59:59:59)에 해당하는 범위를 탐색합니다.

        * 종료 범위만 입력됬을 경우, 최소 범위("1000-01-01 00:00:00")에서 종료 범위까지에 해당하는 범위를 탐색합니다.

        |param name|type|start range param|end range param|description|
        |---|---|---|---|---|
        |CreatedDateTime|DateTime(yyyy-MM-dd HH:mm:ss)|startCreatedDateTime|endCreatedDateTime|해당 TimeTable가 생성된 시간|
        |ModifiedDateTime|DateTime(yyyy-MM-dd HH:mm:ss)|startModifiedDateTime|endModifiedDateTime|해당 TimeTable가 마지막으로 수정된 시간|
        |DATETIME|DateTime(yyyy-MM-dd HH:mm:ss)|startDateTime|endDateTime|해당 TimeTable의 기간|



        ## Like Query Options
        조건과 유사한 모든 TimeTable를 확인할 수 있습니다.
        해당 옵션들을 사용하면, 해당 문자열을 포함하는 event를 조회합니다.

        예를 들어 "이것은 세미나입니다"라는 index가 있다고 가정합시다.

        "index" 인자로 "세미나" 이라는 값을 주었다면, index에 "출결"이라는 글자가 들어가는 event들을 찾습니다.

        |param name|type|description|
        |---|---|---|
        |name|String|해당 TimeTable의 이름입니다.|



        ## Pagination Options
        TimeTable 페이지에 대한 데이터 랜더링 값을 설정할 수 있습니다.
        해당 인자를 통해 pagination처리를 할 수 있습니다. Sort Option은 아래 파트를 참고하세요.

        **주의!** pagination을 설정하지 않더라도, 모든 request는 1000의 Size로 자동으로 pagination처리가 됩니다! 만약 1000건 보다 많은 양의 데이터가 필요하다면, size를 지정해주어야합니다.

        |param name|description|size|
        |---|---|---|
        |Page의 크기|page|Page의 위치|



        ## Sort Options
        다음 옵션들을 사용하여 TimeTable 데이터를 정렬할 수 있습니다.
        Sort Option은 "sort" 인자에 제공해야합니다. 위 옵션들과 다르게 Sort Option은 여러 인자들을 입력해도 됩니다.

        sort 인자에 모든 Option들을 지정했다면, 마지막 인자로 Sort 방향을 지정해주여야 합니다. ASC(오름 차순), DESC(내립차순) 2가지 옵션이 있습니다. 만약 옵션을 지정해주지 않았다면, DESC로 동작합니다.

        사용예시 "sort=member,asc", "sort=member,timeTable,desc"

        **주의!** Sort Option을 지정해주지 않더라도, 기본적으로 id에 대하여 DESC 방향으로 정렬을 진행합니다!

        |param name|description|
        |---|---|
        |id|TimeTable의 ID에 대하여 정렬합니다.|
        |name|TimeTable의 이름에 대하여 정렬합니다.|
        |event|TimeTable이 속한 Event|
        |createdDateTime|생성된 시간순으로 정렬합니다.|
        |modifiedDateTime|마지막으로 수정된 시간 순으로 정렬합니다.|
        |startDateTime|시작 시간 순으로 정렬합니다.|
        |endDateTime|종료 시간 순으로 정렬합니다.|
        |createdBy|생성한자에 대하여 정렬합니다.|
        |modifiedBy|마지막으로 수정한자에 대하여 정렬합니다.|
      parameters:
      - name: eventID
        in: query
        description: eventID
        required: false
        type: string
      - name: createdBy
        in: query
        description: createdBy
        required: false
        type: string
      - name: modifiedBy
        in: query
        description: modifiedBy
        required: false
        type: string
      - name: startCreatedDateTime
        in: query
        description: startCreatedDateTime
        required: false
        type: string
      - name: endCreatedDateTime
        in: query
        description: endCreatedDateTime
        required: false
        type: string
      - name: startModifiedDateTime
        in: query
        description: startModifiedDateTime
        required: false
        type: string
      - name: endModifiedDateTime
        in: query
        description: endModifiedDateTime
        required: false
        type: string
      - name: startDateTime
        in: query
        description: startDateTime
        required: false
        type: string
      - name: endDateTime
        in: query
        description: endDateTime
        required: false
        type: string
      - name: name
        in: query
        description: name
        required: false
        type: string
      - name: page
        in: query
        description: A page number within the paginated result set.
        required: false
        type: integer
      - name: page_size
        in: query
        description: Number of results to return per page.
        required: false
        type: integer
      - name: uid
        in: header
        description: 요청을 보내는 유저의 UID 입니다.
        type: string
      - name: role_id
        in: header
        description: 요청을 보내는 유저의 Role ID입니다.
        type: string
      responses:
        '200':
          description: ''
          schema:
            required:
            - count
            - results
            type: object
            properties:
              count:
                type: integer
              next:
                type: string
                format: uri
                x-nullable: true
              previous:
                type: string
                format: uri
                x-nullable: true
              results:
                type: array
                items:
                  $ref: '#/definitions/TimeTable'
      tags:
      - timetable
    parameters: []
  /timetable/add/:
    post:
      operationId: timetable_add_create
      summary: 신규 TimeTable 추가
      description: |-
        ---
        RBAC - 4(어드민)

        해당 API를 통해 신규 TimeTable을 추가할 수 있습니다.
      parameters:
      - name: uid
        in: header
        description: 요청을 보내는 유저의 UID 입니다.
        type: string
      - name: role_id
        in: header
        description: 요청을 보내는 유저의 Role ID입니다.
        type: string
      responses:
        '201':
          description: ''
      tags:
      - timetable
    parameters: []
  /timetable/{timetableId}/:
    get:
      operationId: timetable_read
      summary: TimeTable API
      description: |-
        ---
        TimeTable을 조회하고, 삭제하고, 수정하는 API를 제공합니다.
      parameters:
      - name: uid
        in: header
        description: 요청을 보내는 유저의 UID 입니다.
        type: string
      - name: role_id
        in: header
        description: 요청을 보내는 유저의 Role ID입니다.
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/TimeTable'
      tags:
      - timetable
    put:
      operationId: timetable_update
      summary: TimeTable API
      description: |-
        ---
        TimeTable을 조회하고, 삭제하고, 수정하는 API를 제공합니다.
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/TimeTable'
      - name: uid
        in: header
        description: 요청을 보내는 유저의 UID 입니다.
        type: string
      - name: role_id
        in: header
        description: 요청을 보내는 유저의 Role ID입니다.
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/TimeTable'
      tags:
      - timetable
    delete:
      operationId: timetable_delete
      summary: TimeTable API
      description: |-
        ---
        TimeTable을 조회하고, 삭제하고, 수정하는 API를 제공합니다.
      parameters:
      - name: uid
        in: header
        description: 요청을 보내는 유저의 UID 입니다.
        type: string
      - name: role_id
        in: header
        description: 요청을 보내는 유저의 Role ID입니다.
        type: string
      responses:
        '204':
          description: ''
      tags:
      - timetable
    parameters:
    - name: timetableId
      in: path
      required: true
      type: string
  /timetable/{timetableId}/attendanceCode/:
    get:
      operationId: timetable_attendanceCode_read
      summary: AttendanceCode API
      description: |-
        ---
        출결 코드를 추가하고, 삭제하고, 사용하는 API를 제공합니다.
      parameters:
      - name: uid
        in: header
        description: 요청을 보내는 유저의 UID 입니다.
        type: string
      - name: role_id
        in: header
        description: 요청을 보내는 유저의 Role ID입니다.
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/AttendanceCode'
      tags:
      - timetable
    post:
      operationId: timetable_attendanceCode_create
      summary: AttendanceCode API
      description: |-
        ---
        출결 코드를 추가하고, 삭제하고, 사용하는 API를 제공합니다.
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/AttendanceCode'
      - name: uid
        in: header
        description: 요청을 보내는 유저의 UID 입니다.
        type: string
      - name: role_id
        in: header
        description: 요청을 보내는 유저의 Role ID입니다.
        type: string
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/AttendanceCode'
      tags:
      - timetable
    delete:
      operationId: timetable_attendanceCode_delete
      summary: AttendanceCode API
      description: |-
        ---
        출결 코드를 추가하고, 삭제하고, 사용하는 API를 제공합니다.
      parameters:
      - name: uid
        in: header
        description: 요청을 보내는 유저의 UID 입니다.
        type: string
      - name: role_id
        in: header
        description: 요청을 보내는 유저의 Role ID입니다.
        type: string
      responses:
        '204':
          description: ''
      tags:
      - timetable
    parameters:
    - name: timetableId
      in: path
      required: true
      type: string
  /timetable/{timetableId}/attendanceCode/register/:
    post:
      operationId: timetable_attendanceCode_register_create
      summary: AttendanceCode로 출결 등록
      description: |-
        ---
        RBAC - 2(수습 회원)

        해당 API를 통해 Attendance Code로 출결을 등록할 수 있습니다.

        ## Parameter 설명
            - timetableId: 출결을 등록할 TimeTable의 ID
      parameters:
      - name: uid
        in: header
        description: 요청을 보내는 유저의 UID 입니다.
        type: string
      - name: role_id
        in: header
        description: 요청을 보내는 유저의 Role ID입니다.
        type: string
      responses:
        '201':
          description: ''
      tags:
      - timetable
    parameters:
    - name: timetableId
      in: path
      required: true
      type: string
definitions:
  Attendance:
    required:
    - modified_by
    - index
    - attendance_type_id
    - member_id
    - time_table_id
    type: object
    properties:
      id:
        title: ID
        type: integer
        readOnly: true
      modified_datetime:
        title: Modified Date Time
        type: string
        format: date-time
        readOnly: true
      modified_by:
        title: Modified By
        type: string
        maxLength: 30
        minLength: 1
      index:
        title: Index
        type: string
        maxLength: 255
        minLength: 1
      attendance_type_id:
        title: Attendance type id
        type: integer
      member_id:
        title: Member id
        type: string
        maxLength: 28
        minLength: 28
      time_table_id:
        title: Time table id
        type: integer
  AttendanceType:
    required:
    - name
    type: object
    properties:
      id:
        title: ID
        type: integer
        readOnly: true
      name:
        title: Name
        type: string
        maxLength: 45
        minLength: 1
  Event:
    required:
    - name
    - start_date_time
    - end_date_time
    type: object
    properties:
      id:
        title: ID
        type: integer
        readOnly: true
      name:
        title: Name
        type: string
        maxLength: 50
        minLength: 1
      index:
        title: Index
        type: string
        maxLength: 255
        minLength: 1
      start_date_time:
        title: Start date time
        type: string
        format: date-time
      end_date_time:
        title: End date time
        type: string
        format: date-time
  TimeTable:
    required:
    - name
    - event_id
    - start_date_time
    - end_date_time
    - modified_by
    type: object
    properties:
      id:
        title: ID
        type: integer
        readOnly: true
      name:
        title: Name
        type: string
        maxLength: 50
        minLength: 1
      index:
        title: Index
        type: string
        maxLength: 200
        minLength: 1
      event_id:
        title: Event id
        type: integer
        minimum: 1
      start_date_time:
        title: Start date time
        type: string
        format: date-time
      end_date_time:
        title: End date time
        type: string
        format: date-time
      modified_datetime:
        title: Modified Date Time
        type: string
        format: date-time
        readOnly: true
      modified_by:
        title: Modified By
        type: string
        maxLength: 30
        minLength: 1
  AttendanceCode:
    required:
    - code
    - time_table_id
    type: object
    properties:
      code:
        title: Code
        type: string
        maxLength: 255
        minLength: 1
      time_table_id:
        title: Time table id
        type: integer
      expire_at:
        title: Expire at
        type: string
        format: date-time
        x-nullable: true
